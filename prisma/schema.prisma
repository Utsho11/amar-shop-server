// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  role      Role
  name      String
  email     String     @unique
  password  String
  phone     String?
  status    UserStatus @default(ACTIVE)
  isDeleted Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Shop      Shop[]
  Order     Order[]

  @@map("users") // Maps the model to the "users" table in the database
}

model Shop {
  id            String    @id @default(uuid())
  vendorId      String
  name          String
  logoUrl       String?
  description   String?   @db.Text
  isDeleted     Boolean   @default(false)
  isBlacklisted Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Product       Product[]
  // Relations
  vendor        User      @relation(fields: [vendorId], references: [id])

  @@map("shops") // Maps this model to the "shops" table in the database
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(50)
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]

  @@map("categories") // Maps this model to the "categories" table in the database
}

model Product {
  id             String   @id @default(uuid())
  shopId         String
  name           String   @db.VarChar(150)
  description    String?  @db.Text
  price          Decimal  @db.Decimal(10, 2)
  categoryId     String
  discount       Decimal  @default(0) @db.Decimal(5, 2)
  inventoryCount Int      @default(0)
  imageUrls      String[]
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  shop      Shop        @relation(fields: [shopId], references: [id])
  category  Category    @relation(fields: [categoryId], references: [id])
  OrderItem OrderItem[]

  @@map("products") // Maps this model to the "products" table in the database
}

model Order {
  id            String        @id @default(uuid())
  customerId    String
  status        OrderStatus   @default(PENDING)
  totalAmount   Decimal       @db.Decimal(10, 2)
  paymentMethod String
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  customer  User        @relation(fields: [customerId], references: [id])
  OrderItem OrderItem[]

  @@map("orders") // Maps this model to the "orders" table in the database
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items") // Maps this model to the "order_items" table in the database
}

// Enum for role validation
enum Role {
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
